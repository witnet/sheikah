{
  "operator_info_description": {
    "get_key": "Access to the \"{{key}}\" key of the input {{inputType}}, and manage the value as {{outputType}}",
    "cast": "Cast the {{inputType}} input into {{outputType}}",
    "array": {
      "count": "Count the number of elements in the input Array",
      "filter": "Discard the items in the input array that doesn't match the {{filter}} function",
      "flatten": "Remove {{depth}} level of nesting of the input Array",
      "map": "Apply the {{subscript}} script on all the elements of the input Array",
      "reduce": "Reduce all the items in the input Array into a single item of type {{outputType}} by applying the {{reducer}} reducer function",
      "some": "Tell whether at least one of the items in the input Array passes the condition defined by the {{filter}} filter function",
      "sort":"Sort the input Array in {{order}} order",
      "take": "Take the elements from the input Array between positions {{min}} and {{max}}, and discard all the rest"
    },
    "boolean": {
      "match": "Match the Boolean input with \"{{subscript}}\" and return the value associated with it. Similar than a switch statement",
      "negate": "Negate the input Boolean (make it True if it was False, or make it False if it was True)"
    },
    "bytes": {
      "hash": "Compute the hash of the input Bytes"
    },
    "integer": {
      "absolute":"Calculate the absolute value of the input Integer",
      "greater_than": "Check if the input Integer is greater than {{argument}} (output will be Boolean)",
      "lessThan": "Check if the input Integer is greater than {{argument}} (output will be Boolean)",
      "match": "Match the Integer input with {{subscript}} and return the value associated with it. Similar than a switch statement",
      "modulo": "Calculate the integer division of the input integer by {{argument}}",
      "multiply":"Multiply the input Integer by {{factor}}",
      "negate":"Calculate the negative of the input Integer",
      "power": "Calculate the input Integer raised to the power of {{exponent}}",
      "reciprocal": "Calculate the multiplicative inverse (1/x) of the input Integer, and manage the result as Float.",
      "sum":"Sum {{addend}} to the input Integer"
    },
    "float": {
      "absolute": "Compute the absolute value of the input Float, and manage the result as Float",
      "celling": "Compute the the least Integer greater than or equal the input Float",
      "greater_than": "Compare if the input Float is greater than {{value}}, and manage the value as Boolean",
      "floor": "Compute the greatest integer less or equal the input Float, and manage the result as Integer",
      "less_than": "Compare if the input Float is less than {{argument}}, and manage the value as Boolean",
      "modulo": "Compute the division by the input Float and {{argument}} Then manage the result as Float",
      "multiply": "Compute the product by the input Float and {{argument}}. Then manage the result as Integer",
      "negate": "Compute the negative of the input Integer, and manage the result as Float",
      "power": "Compute the input Float raised to the power of {{exponent}}. Then, handle the result as Float",
      "reciprocal": "Compute the multiplicative inverse of the input Float and manage the result as Float",
      "round": "Round integer part from the Float input, and manage the result as Integer",
      "sum": "Compute the addition between the input Float and {{addend}}. Then handle the result as Float",
      "truncate": "Take integer part from the Float input, and manage the result as Integer"
    },
    "map": {
      "entries": "Obtain a list of key-value tuples from the input Map, and manage the value as Array",
      "keys": "Obtain a list with the keys names of the input Map, and manage the value as Array of String.",
      "values": "Obtain a list with the values of the input Map, and manage the value as an Array of {{type}}"
    },
    "string": {
      "length": "Count the number of elements of the input String, and manage the values as Integer.",
      "match": "Match the String input with {{subscript}} and return the value associated with it. Similar than a switch statement",
      "parse_json_array": "Interpretate the input String as a JSON-encoded Array structure.",
      "parse_json_map": "Interpretate the input String as a JSON-encoded Map structure.",
      "parse_xml": "Interpretate the input String as a XML-encoded Map structure.",
      "to_lower_case": "Convert to lowercase the input String, and manage the value as String",
      "to_upper_case": "Convert to uppercase the input String, and manage the value as String"
    }
  },

  "aggregation_tally_description": {
    "filter": {
      "deviation_standard": "Discard any result that is more than \"{{number}}\" times the standard deviation times away from the average. Long story short: remove outliers",
      "mode": "Discard any result that is different from the mode. Long story short: remove outliers"
    },
    "reducer": {
      "mode":"Compute the mode of the values",
      "average_mean":"Compute the average mean of the values",
      "deviation_standard": "Compute the standard deviation of the values"
    }
  }
}